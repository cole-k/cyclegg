Proving begin clam_1: (double x) === (plus x x)
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
prove lemma forall x: Nat. (double x) === (plus x x)
clam_1 uncyclic: VALID (14 ms)
Proving begin clam_2: (len (append x y)) === (len (append y x))
new lemma forall x: (List a). y: (List a). (len (append x y)) === (len (append y x))
clam_2 uncyclic: VALID (49 ms)
Proving begin clam_3: (len (append x y)) === (plus (len x) (len y))
new lemma forall x: (List a). y: (List a). (len (append x y)) === (plus (len x) (len y))
clam_3 uncyclic: VALID (15 ms)
Proving begin clam_4: (len (append x x)) === (double (len x))
new lemma forall v0: (List a). v1: (List a). v2: a. (S (len (append v0 v1))) === (len (append v0 (Cons v2 v1)))
prove lemma forall x: (List a). (len (append x x)) === (double (len x))
clam_4 uncyclic: VALID (83 ms)
Proving begin clam_5: (len (rev x)) === (len x)
new lemma forall v0: (List a). v1: a. (S (len v0)) === (len (append v0 (Cons v1 Nil)))
prove lemma forall x: (List a). (len (rev x)) === (len x)
clam_5 uncyclic: VALID (70 ms)
Proving begin clam_6: (len (rev (append x y))) === (plus (len x) (len y))
new lemma forall v0: (List a). v1: a. (S (len v0)) === (len (append v0 (Cons v1 Nil)))
new lemma forall x: (List a). y: (List a). (len (rev (append x y))) === (plus (len x) (len y))
clam_6 uncyclic: VALID (123 ms)
Proving begin clam_7: (len (qreva x y)) === (plus (len x) (len y))
new lemma forall v0: Nat. v0 === (plus v0 Z)
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
new lemma forall v0: (List a). v1: (List a). v2: a. (S (len (qreva v0 v1))) === (len (qreva v0 (Cons v2 v1)))
prove lemma forall x: (List a). y: (List a). (len (qreva x y)) === (plus (len x) (len y))
clam_7 uncyclic: VALID (212 ms)
Proving begin clam_8: (drop x (drop y z)) === (drop y (drop x z))
new lemma forall v0: Nat. v1: (List a). (drop v0 (drop (S Z) v1)) === (drop (S v0) v1)
new lemma forall v0: Nat. v1: (List a). (drop (S v0) v1) === (drop (S Z) (drop v0 v1))
prove lemma forall x: Nat. y: Nat. z: (List a). (drop x (drop y z)) === (drop y (drop x z))
prove lemma forall v0: Nat. v1: Nat. v2: (List a). (drop v0 (drop v1 v2)) === (drop v1 (drop v0 v2))
prove lemma forall v0: Nat. v1: Nat. v2: (List a). (drop v0 (drop (S v1) v2)) === (drop (S v1) (drop v0 v2))
prove lemma forall v0: Nat. v1: Nat. v2: (List a). (drop v0 (drop (S v1) v2)) === (drop v1 (drop (S v0) v2))
prove lemma forall v0: Nat. v1: Nat. v2: (List a). (drop (S v0) (drop v1 v2)) === (drop (S v1) (drop v0 v2))
clam_8 uncyclic: VALID (273 ms)
Proving begin clam_9: (drop w (drop x (drop y z))) === (drop y (drop x (drop w z)))
new lemma forall v0: Nat. v1: (List a). (drop v0 (drop (S Z) v1)) === (drop (S v0) v1)
new lemma forall v0: Nat. v1: (List a). (drop (S v0) v1) === (drop (S Z) (drop v0 v1))
prove lemma forall w: Nat. x: Nat. y: Nat. z: (List a). (drop w (drop x (drop y z))) === (drop y (drop x (drop w z)))
prove lemma forall v0: Nat. v1: Nat. v2: Nat. v3: (List a). (drop v0 (drop v1 (drop v2 v3))) === (drop v2 (drop v1 (drop v0 v3)))
prove lemma forall v0: Nat. v1: Nat. v2: (List a). (drop v0 (drop v1 v2)) === (drop v1 (drop v0 v2))
prove lemma forall v0: Nat. v1: Nat. v2: Nat. v3: (List a). (drop v0 (drop (S v1) (drop v2 v3))) === (drop v2 (drop (S v1) (drop v0 v3)))
prove lemma forall v0: Nat. v1: Nat. v2: Nat. v3: (List a). (drop v0 (drop v1 (drop (S v2) v3))) === (drop (S v2) (drop v1 (drop v0 v3)))
prove lemma forall v0: Nat. v1: Nat. v2: (List a). (drop v0 (drop (S v1) v2)) === (drop (S v1) (drop v0 v2))
clam_9 uncyclic: VALID (614 ms)
Proving begin clam_10: (rev (rev x)) === x
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
prove lemma forall x: (List a). (rev (rev x)) === x
clam_10 uncyclic: VALID (58 ms)
Proving begin clam_11: (rev (append (rev x) (rev y))) === (append y x)
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: (List a). v1: (List a). (append (append (rev v0) v1) Nil) === (append (rev v0) v1)
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
new lemma forall v0: (List a). v1: (List a). v2: (List a). (append v0 (append v1 v2)) === (append (append v0 v1) v2)
prove lemma forall x: (List a). y: (List a). (rev (append (rev x) (rev y))) === (append y x)
clam_11 uncyclic: VALID (1606 ms)
Proving begin clam_12: (qreva x y) === (append (rev x) y)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
prove lemma forall x: (List a). y: (List a). (qreva x y) === (append (rev x) y)
clam_12 uncyclic: VALID (165 ms)
Proving begin clam_13: (half (plus x x)) === x
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
prove lemma forall x: Nat. (half (plus x x)) === x
clam_13 uncyclic: VALID (65 ms)
Proving begin clam_14: (sorted (sort x)) === True
new lemma forall v0: Bool. v0 === (and v0 True)
new lemma forall v0: Bool. v0 === (and True v0)
new lemma forall v0: Nat. v1: Nat. (and True (leq v0 v1)) === (leq v0 v1)
new lemma forall v0: (List Nat). (sorted v0) === (sorted (Cons Z v0))
clam_14 uncyclic: TIMEOUT (600656 ms)
Proving begin clam_15: (plus x (S x)) === (S (plus x x))
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
clam_15 uncyclic: VALID (7 ms)
Proving begin clam_16: (even (plus x x)) === True
new lemma forall v0: Bool. v0 === (not (not v0))
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
prove lemma forall x: Nat. (even (plus x x)) === True
clam_16 uncyclic: VALID (29 ms)
Proving begin clam_17: (rev (rev (append x y))) === (append (rev (rev x)) (rev (rev y)))
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
prove lemma forall v0: (List a). v0 === (rev (rev v0))
clam_17 uncyclic: VALID (110 ms)
Proving begin clam_18: (rev (append (rev x) y)) === (append (rev y) x)
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
new lemma forall v0: (List a). v0 === (rev (rev v0))
new lemma forall v0: (List a). v1: (List a). v2: (List a). (append v0 (append v1 v2)) === (append (append v0 v1) v2)
prove lemma forall v0: (List a). v1: (List a). (append v0 v1) === (rev (append (rev v1) (rev v0)))
prove lemma forall v0: (List a). v1: (List a). (append v0 (rev v1)) === (rev (append v1 (rev v0)))
clam_18 uncyclic: VALID (43575 ms)
Proving begin clam_19: (append (rev (rev x)) y) === (rev (rev (append x y)))
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
prove lemma forall v0: (List a). v0 === (rev (rev v0))
clam_19 uncyclic: VALID (105 ms)
Proving begin clam_20: (even (len (append x x))) === True
new lemma forall v0: Bool. v0 === (not (not v0))
new lemma forall v0: (List a). v1: (List a). v2: a. (S (len (append v0 v1))) === (len (append v0 (Cons v2 v1)))
prove lemma forall x: (List a). (even (len (append x x))) === True
clam_20 uncyclic: VALID (162 ms)
Proving begin clam_21: (rotate (len x) (append x y)) === (append y x)
new lemma forall v0: (List a). v1: a. (S (len v0)) === (len (append v0 (Cons v1 Nil)))
prove lemma forall v0: (List a). (len v0) === (len (rotate (S Z) v0))
new lemma forall v0: (List a). (len v0) === (len (rotate (S (S Z)) v0))
new lemma forall v0: Nat. v1: (List a). (rotate v0 (rotate (S Z) v1)) === (rotate (S v0) v1)
new lemma forall v0: Nat. (len (rotate v0 Nil)) === (len (rotate (S v0) Nil))
new lemma forall v0: Nat. (rotate (S v0) Nil) === (rotate (S Z) (rotate v0 Nil))
new lemma forall v0: Nat. (rotate (len (rotate v0 Nil)) Nil) === (rotate (len (rotate (S v0) Nil)) Nil)
new lemma forall v0: Nat. (rotate (S Z) (rotate (S v0) Nil)) === (rotate (S (S Z)) (rotate v0 Nil))
new lemma forall v0: Nat. v1: Nat. (len (rotate v0 Nil)) === (len (rotate v0 (rotate v1 Nil)))
new lemma forall v0: Nat. (rotate v0 Nil) === (rotate (S Z) (rotate v0 Nil))
new lemma forall v0: Nat. v1: Nat. (len (rotate v0 Nil)) === (len (rotate v0 (rotate (S v1) Nil)))
new lemma forall v0: Nat. v1: Nat. (len (rotate v0 Nil)) === (len (rotate (S v0) (rotate (S v1) Nil)))
clam_21 uncyclic: TIMEOUT (609950 ms)
Proving begin clam_22: (even (len (append x y))) === (even (len (append y x)))
new lemma forall x: (List a). y: (List a). (even (len (append x y))) === (even (len (append y x)))
clam_22 uncyclic: VALID (69 ms)
Proving begin clam_23: (half (len (append x y))) === (half (len (append y x)))
new lemma forall v0: (List a). v1: (List a). v2: a. (S (len (append v0 v1))) === (len (append v0 (Cons v2 v1)))
prove lemma forall x: (List a). y: (List a). (half (len (append x y))) === (half (len (append y x)))
clam_23 uncyclic: VALID (267 ms)
Proving begin clam_24: (even (plus x y)) === (even (plus y x))
new lemma forall x: Nat. y: Nat. (even (plus x y)) === (even (plus y x))
clam_24 uncyclic: VALID (10 ms)
Proving begin clam_25: (even (len (append x y))) === (even (plus (len x) (len y)))
new lemma forall x: (List a). y: (List a). (even (len (append x y))) === (even (plus (len x) (len y)))
clam_25 uncyclic: VALID (21 ms)
Proving begin clam_26: (half (plus x y)) === (half (plus y x))
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
prove lemma forall x: Nat. y: Nat. (half (plus x y)) === (half (plus y x))
clam_26 uncyclic: VALID (37 ms)
Proving begin clam_27: (rev x) === (qreva x Nil)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
prove lemma forall v0: (List a). v1: (List a). (append (rev v0) v1) === (qreva v0 v1)
prove lemma forall v0: (List a). v1: (List a). (append (qreva v0 Nil) v1) === (qreva v0 v1)
prove lemma forall v0: (List a). v1: a. v2: (List a). (append (qreva v0 (Cons v1 Nil)) v2) === (qreva v0 (Cons v1 v2))
prove lemma forall x: (List a). (rev x) === (qreva x Nil)
clam_27 uncyclic: VALID (413 ms)
Proving begin clam_28: (revflat x) === (qrevaflat x Nil)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
new lemma forall v0: (List a). v1: a. v2: (List a). v3: (List a). (append v0 (Cons v1 (append v2 v3))) === (append (append v0 (Cons v1 v2)) v3)
prove lemma forall v0: (Tree a). v1: a. v2: (List a). (append (qrevaflat v0 Nil) (Cons v1 v2)) === (qrevaflat v0 (Cons v1 v2))
prove lemma forall v0: (Tree a). v1: a. v2: (List a). (append (revflat v0) (Cons v1 v2)) === (qrevaflat v0 (Cons v1 v2))
prove lemma forall v0: (Tree a). v1: (List a). (append (qrevaflat v0 Nil) v1) === (qrevaflat v0 v1)
prove lemma forall v0: (Tree a). v1: (List a). (append (revflat v0) v1) === (qrevaflat v0 v1)
prove lemma forall x: (Tree a). (revflat x) === (qrevaflat x Nil)
clam_28 uncyclic: VALID (5373 ms)
Proving begin clam_29: (rev (qreva x Nil)) === x
clam_29 uncyclic: INVALID (476885 ms)
Proving begin clam_30: (rev (append (rev x) Nil)) === x
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
prove lemma forall x: (List a). (rev (append (rev x) Nil)) === x
prove lemma forall v0: a. v1: (List a). (Cons v0 v1) === (rev (append (rev v1) (Cons v0 Nil)))
clam_30 uncyclic: VALID (192 ms)
Proving begin clam_31: (qreva (qreva x Nil) Nil) === x
clam_31 uncyclic: INVALID (73040 ms)
Proving begin clam_32: (rotate (len x) x) === x
clam_32 uncyclic: INVALID (43649 ms)
Proving begin clam_33: (fac x) === (qfac x (S Z))
clam_33 uncyclic: INVALID (12 ms)
Proving begin clam_34: (mult x y) === (qmult x y Z)
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
new lemma forall v0: Nat. v1: Nat. v2: Nat. v3: Nat. (S (plus (qmult v0 v1 v2) v3)) === (plus (qmult v0 v1 (S v2)) v3)
new lemma forall v0: Nat. v1: Nat. v2: Nat. v3: Nat. (S (plus (plus (qmult v0 v1 (S v2)) v3) v3)) === (plus (plus (qmult v0 v1 (S (S v2))) v3) v3)
new lemma forall v0: Nat. v1: Nat. v2: Nat. (S (plus (plus (qmult v0 (S v1) v2) v1) v1)) === (plus (plus (qmult v0 (S v1) (S v2)) v1) v1)
new lemma forall v0: Nat. v0 === (plus v0 Z)
new lemma forall v0: Nat. v1: Nat. (plus v0 v1) === (plus v1 v0)
new lemma forall v0: Nat. v1: Nat. v2: Nat. v3: Nat. (plus v0 (qmult v1 v2 v3)) === (qmult v1 v2 (plus v0 v3))
prove lemma forall x: Nat. y: Nat. (mult x y) === (qmult x y Z)
clam_34 uncyclic: VALID (20520 ms)
Proving begin clam_35: (exp x y) === (qexp x y (S Z))
new lemma forall v0: Nat. v0 === (plus v0 Z)
prove lemma forall v0: Nat. (mult v0 Z) === (mult (mult v0 Z) Z)
clam_35 uncyclic: TIMEOUT (611486 ms)
Proving begin clam_48: (len (sort x)) === (len x)
new lemma forall v0: (List Nat). v1: Nat. (S (len v0)) === (len (insort v1 v0))
prove lemma forall x: (List Nat). (len (sort x)) === (len x)
clam_48 uncyclic: VALID (101 ms)
Proving begin clam_49: (mem x (sort y)) === True ==> (mem x y) === True
new lemma forall v0: Bool. v0 === (ite v0 True False)
clam_49 uncyclic: TIMEOUT (601773 ms)
Proving begin clam_50: (count x (sort y)) === (count x y)
new lemma forall v0: (List Nat). (S (count Z v0)) === (count Z (insort Z v0))
new lemma forall v0: (List Nat). v1: Nat. (count Z v0) === (count Z (insort (S v1) v0))
new lemma forall v0: Nat. v1: (List Nat). (count (S v0) v1) === (count (S v0) (insort Z v1))
clam_50 uncyclic: TIMEOUT (603093 ms)
Proving begin clam_75: (append (rev x) y) === (qreva x y)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
prove lemma forall x: (List a). y: (List a). (append (rev x) y) === (qreva x y)
clam_75 uncyclic: VALID (150 ms)
Proving begin clam_76: (append (revflat x) y) === (qrevaflat x y)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
new lemma forall v0: (List a). v1: a. v2: (List a). v3: (List a). (append v0 (Cons v1 (append v2 v3))) === (append (append v0 (Cons v1 v2)) v3)
prove lemma forall x: (Tree a). y: (List a). (append (revflat x) y) === (qrevaflat x y)
clam_76 uncyclic: VALID (2190 ms)
Proving begin clam_77: (rev (qreva x y)) === (append (rev y) x)
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
clam_77 uncyclic: TIMEOUT (600492 ms)
Proving begin clam_78: (rev (qreva x (rev y))) === (append y x)
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
new lemma forall v0: a. v1: (List a). v2: (List a). (Cons v0 (qreva v1 v2)) === (qreva (append v1 (Cons v0 Nil)) v2)
prove lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (qreva (rev v1) (Cons v0 Nil)))
prove lemma forall v0: (List a). v1: (List a). (append v0 v1) === (qreva (rev v0) v1)
prove lemma forall v0: a. v1: (List a). (Cons v0 v1) === (rev (qreva v1 (Cons v0 Nil)))
new lemma forall v0: (List a). v0 === (rev (rev v0))
new lemma forall v0: (List a). v1: (List a). (qreva (rev v0) v1) === (qreva (rev (rev (rev v0))) v1)
new lemma forall v0: (List a). v1: a. (qreva v0 (Cons v1 Nil)) === (qreva (rev (rev v0)) (Cons v1 Nil))
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: a. v1: (List a). v2: (List a). (Cons v0 (qreva (rev v1) v2)) === (qreva (qreva v1 (Cons v0 Nil)) v2)
new lemma forall v0: (List a). v1: (List a). v2: (List a). (append v0 (append v1 v2)) === (append (append v0 v1) v2)
prove lemma forall x: (List a). y: (List a). (rev (qreva x (rev y))) === (append y x)
clam_78 uncyclic: VALID (312609 ms)
Proving begin clam_79: (rev (append (rev x) y)) === (append (rev y) x)
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
prove lemma forall v0: a. v1: (List a). (Cons v0 v1) === (rev (append (rev v1) (Cons v0 Nil)))
new lemma forall v0: (List a). v0 === (rev (rev v0))
new lemma forall v0: (List a). v1: (List a). (append v0 v1) === (append (rev (rev (append v0 Nil))) v1)
new lemma forall v0: (List a). v1: (List a). (append (append v0 Nil) v1) === (append (rev (rev v0)) v1)
new lemma forall v0: (List a). v1: a. (append v0 (Cons v1 Nil)) === (append (rev (rev v0)) (Cons v1 Nil))
new lemma forall v0: (List a). v1: (List a). (append (append v0 Nil) v1) === (append (rev (rev (append v0 Nil))) v1)
new lemma forall v0: (List a). v1: (List a). v2: (List a). (append v0 (append v1 v2)) === (append (append v0 v1) v2)
prove lemma forall v0: (List a). v1: (List a). (append v0 v1) === (rev (append (rev v1) (rev v0)))
prove lemma forall v0: (List a). v1: (List a). (append v0 (rev v1)) === (rev (append v1 (rev v0)))
clam_79 uncyclic: VALID (40216 ms)
Proving begin clam_80: (rev (append (rev x) (rev y))) === (append y x)
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: (List a). v1: (List a). (append (append (rev v0) v1) Nil) === (append (rev v0) v1)
new lemma forall v0: a. v1: (List a). (Cons v0 (rev v1)) === (rev (append v1 (Cons v0 Nil)))
new lemma forall v0: (List a). v1: (List a). v2: (List a). (append v0 (append v1 v2)) === (append (append v0 v1) v2)
prove lemma forall x: (List a). y: (List a). (rev (append (rev x) (rev y))) === (append y x)
clam_80 uncyclic: VALID (1675 ms)
Proving begin clam_81: (qreva (qreva x y) Nil) === (append (rev y) x)
new lemma forall v0: (List a). v0 === (append v0 Nil)
clam_81 uncyclic: TIMEOUT (601421 ms)
Proving begin clam_82: (qreva (qreva x (rev y)) Nil) === (append y x)
new lemma forall v0: a. v1: (List a). v2: (List a). (Cons v0 (qreva v1 v2)) === (qreva (append v1 (Cons v0 Nil)) v2)
new lemma forall v0: (List a). v1: a. v2: (List a). (append v0 (Cons v1 v2)) === (append (append v0 (Cons v1 Nil)) v2)
prove lemma forall v0: (List a). v1: (List a). (append (qreva v0 Nil) v1) === (qreva v0 v1)
prove lemma forall v0: (List a). v1: a. v2: (List a). (append (qreva v0 (Cons v1 Nil)) v2) === (qreva v0 (Cons v1 v2))
prove lemma forall v0: a. v1: (List a). (Cons v0 (qreva v1 Nil)) === (qreva (qreva (qreva v1 Nil) (Cons v0 Nil)) Nil)
prove lemma forall v0: a. v1: (List a). (Cons v0 v1) === (qreva (qreva v1 (Cons v0 Nil)) Nil)
prove lemma forall v0: (List a). v1: (List a). (append v0 v1) === (qreva (qreva v0 Nil) v1)
prove lemma forall v0: a. v1: (List a). v2: (List a). (Cons v0 (append v1 v2)) === (qreva (qreva v1 (Cons v0 Nil)) v2)
new lemma forall v0: (List a). v0 === (append v0 Nil)
new lemma forall v0: (List a). v1: (List a). (qreva (append v0 Nil) v1) === (qreva (qreva (qreva v0 v1) Nil) Nil)
new lemma forall v0: (List a). v1: (List a). (qreva v0 v1) === (qreva (qreva (qreva (append v0 Nil) v1) Nil) Nil)
new lemma forall v0: (List a). v1: (List a). (qreva (qreva (qreva v0 v1) Nil) Nil) === (qreva (qreva (qreva v0 Nil) Nil) v1)
new lemma forall v0: (List a). v1: (List a). (qreva v0 (qreva v1 Nil)) === (qreva (qreva (qreva v0 (qreva v1 Nil)) Nil) Nil)
new lemma forall v0: (List a). v1: (List a). (qreva v0 v1) === (qreva (qreva (qreva (qreva (qreva v0 Nil) Nil) v1) Nil) Nil)
new lemma forall v0: (List a). v1: a. v2: (List a). (qreva v0 (Cons v1 v2)) === (qreva (qreva (qreva v0 (Cons v1 v2)) Nil) Nil)
new lemma forall v0: (List a). v1: (List a). (qreva (append v0 Nil) v1) === (qreva (qreva (qreva (append v0 Nil) v1) Nil) Nil)
new lemma forall v0: (List a). v1: (List a). v2: (List a). (append v0 (append v1 v2)) === (append (append v0 v1) v2)
prove lemma forall x: (List a). y: (List a). (qreva (qreva x (rev y)) Nil) === (append y x)
clam_82 uncyclic: VALID (11345 ms)
Proving begin clam_83: (rotate (len x) (append x y)) === (append y x)
new lemma forall v0: (List a). v1: a. (S (len v0)) === (len (append v0 (Cons v1 Nil)))
prove lemma forall v0: (List a). (len v0) === (len (rotate (S Z) v0))
new lemma forall v0: (List a). (len v0) === (len (rotate (S (S Z)) v0))
new lemma forall v0: Nat. v1: (List a). (rotate v0 (rotate (S Z) v1)) === (rotate (S v0) v1)
new lemma forall v0: Nat. (len (rotate v0 Nil)) === (len (rotate (S v0) Nil))
new lemma forall v0: Nat. (rotate (S v0) Nil) === (rotate (S Z) (rotate v0 Nil))
new lemma forall v0: Nat. (rotate (len (rotate v0 Nil)) Nil) === (rotate (len (rotate (S v0) Nil)) Nil)
new lemma forall v0: Nat. (rotate (S Z) (rotate (S v0) Nil)) === (rotate (S (S Z)) (rotate v0 Nil))
new lemma forall v0: Nat. v1: Nat. (len (rotate v0 Nil)) === (len (rotate v0 (rotate (S v1) Nil)))
new lemma forall v0: Nat. v1: Nat. (len (rotate v0 Nil)) === (len (rotate (S v0) (rotate (S v1) Nil)))
clam_83 uncyclic: TIMEOUT (600361 ms)
Proving begin clam_84: (mult (fac x) y) === (qfac x y)
clam_84 uncyclic: INVALID (14 ms)
Proving begin clam_85: (plus (mult x y) z) === (qmult x y z)
new lemma forall v0: Nat. v0 === (plus v0 Z)
new lemma forall v0: Nat. v1: Nat. (S (plus v0 v1)) === (plus v0 (S v1))
prove lemma forall v0: Nat. v1: Nat. v2: Nat. (plus v0 (plus v1 v2)) === (plus (plus v0 v2) v1)
prove lemma forall x: Nat. y: Nat. z: Nat. (plus (mult x y) z) === (qmult x y z)
clam_85 uncyclic: VALID (164 ms)
Attempted 49 goals:
  36 solved (no cyclic)

Process finished with exit code 0


