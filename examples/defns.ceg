(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(:: ite (-> (Bool a a) a))
(let ite (True ?x ?y ) ?x)
(let ite (False ?x ?y) ?y)
(let ite (?b    ?x ?x) ?x)

(:: not (-> (Bool) Bool))
(let not (True) False)
(let not (False) True)

(:: and (-> (Bool Bool) Bool))
(let and (False ?y) False)
(let and (?x False) False)
(let and (True True) True)

(:: or (-> (Bool Bool) Bool))
(let or (True ?y) True)
(let or (?x True) True)
(let or (False False) False)

)