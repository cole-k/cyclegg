(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Int ())
(:: zero Int)
(:: plus (-> (Int Int) Int))
(axiom plus (?x ?y) (plus ?y ?x))
(axiom plus (?x (plus ?y ?z)) (plus (plus ?x ?y) ?z))
(axiom plus ((plus ?x ?y) ?z) (plus ?x (plus ?y ?z)))
(axiom plus (?x zero) ?x)

(data Bool (True False))
(:: True Bool)
(:: False Bool)

(:: max (-> (Int Int) Int))
(axiom max (?x ?y) (max ?y ?x))
(axiom max ((plus ?x ?z) (plus ?y ?z)) (plus ?z (max ?x ?y)))
(axiom plus (?z (max ?x ?y)) (max (plus ?x ?z) (plus ?y ?z)))
(axiom max (?x ?x) ?x)

(data List (a) (Nil Cons))
(:: Nil  (List a))
(:: Cons (-> (a (List a)) (List a)))

(:: tails (-> ((List a)) (List (List a))))
(let tails (Nil)      (Cons Nil Nil)             )
(let tails ((Cons ?h ?t)) (Cons (Cons ?h ?t) (tails ?t)))

(:: sum (-> ((List Int)) Int))
(let sum (Nil)      zero            )
(let sum ((Cons ?h ?t)) (plus ?h (sum ?t)))

(:: map (-> ((-> (a) b) (List a)) (List b)))
(let map (?f Nil          ) Nil                          )
(let map (?f (Cons ?x ?xs)) (Cons ($ ?f ?x) (map ?f ?xs)))

(:: maximum (-> ((List Int)) Int))
(let maximum (Nil)      zero                )
(let maximum ((Cons ?h ?t)) (max ?h (maximum ?t)))

(:: mts (-> ((List Int)) Int))
(let mts (Nil)      zero                          )
(let mts ((Cons ?h ?t)) (max (mts ?t) (plus ?h (sum ?t))))

(=== mts_optimize (xs) ((List Int))
    (maximum (map sum (tails xs))) (mts xs)
)

)