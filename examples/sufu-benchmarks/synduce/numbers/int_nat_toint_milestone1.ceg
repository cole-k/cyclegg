(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(data INat (Pos Neg))
(:: Pos (-> (Nat) INat))
(:: Neg (-> (Nat) INat))

(data Int ())
(:: zero Int)
(:: one Int)
(:: plus (-> (Int Int) Int))
(:: neg (-> (Int) Int))
(axiom plus (?x ?y) (plus ?y ?x))
(axiom plus (?x (plus ?y ?z)) (plus (plus ?x ?y) ?z))
(axiom plus ((plus ?x ?y) ?z) (plus ?x (plus ?y ?z)))
(axiom plus (?x zero) ?x)
(axiom plus (?x (neg ?x)) zero)
(axiom plus ((neg ?x) (neg ?y)) (neg (plus ?x ?y)))
(axiom neg (zero) zero)
(axiom neg ((plus ?x ?y)) (plus (neg ?x) (neg ?y)))

(:: nsum (-> (Nat) Int))
(let nsum (Z) zero)
(let nsum ((S ?x)) (plus one (nsum ?x)))

(:: itoint (-> (INat) Int))
(let itoint ((Pos ?x)) (nsum ?x))
(let itoint ((Neg ?x)) (neg (plus one (nsum ?x))))

(:: dec (-> (INat) INat))
(let dec ((Pos Z)) (Neg Z))
(let dec ((Pos (S ?n))) (Pos ?n))
(let dec ((Neg ?n)) (Neg (S ?n)))

(:: inc (-> (INat) INat))
(let inc ((Pos ?n)) (Pos (S ?n)))
(let inc ((Neg Z)) (Pos Z))
(let inc ((Neg (S ?n))) (Neg ?n))

(data EInt (Zero Sub1 Add1))
(:: Zero EInt)
(:: Sub1 (-> (EInt) EInt))
(:: Add1 (-> (EInt) EInt))

(:: repr (-> (EInt) INat))
(let repr (Zero) (Pos Z))
(let repr ((Sub1 ?x)) (dec (repr ?x)))
(let repr ((Add1 ?x)) (inc (repr ?x)))

(:: target (-> (EInt) Int))
(let target (Zero) zero)
(let target ((Sub1 ?x)) (plus (target ?x) (neg one)))
(let target ((Add1 ?x)) (plus (target ?x) one))

(=== m1 (n) (INat)
    (plus (itoint n) (neg one)) (itoint (dec n))
)

(=== m2 () ()
    (plus (itoint (Neg Z)) one) (itoint (Pos Z))
)
(=== m3 (n) (Nat)
    (plus (itoint (Neg (S n))) one) (itoint (Neg n))
)
(=== m4 (n) (Nat)
    (plus (itoint (Pos n)) one) (itoint (Pos (S n)))
)

(=== m5 (n) (INat)
    (plus (itoint n) one) (itoint (inc n))
)

)
