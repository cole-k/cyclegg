(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(:: if (Bool a a) a)
(let if (True ?x ?y) ?x)
(let if (False ?X ?y) ?y)

(data Int ())
(:: zero Int)
(:: one Int)
(:: plus (-> (Int Int) Int))
(:: times (-> (Int Int) Int))
(axiom plus (?x ?y) (plus ?y ?x))
(axiom plus (?x (plus ?y ?z)) (plus (plus ?x ?y) ?z))
(axiom plus ((plus ?x ?y) ?z) (plus ?x (plus ?y ?z)))
(axiom plus (?x zero) ?x)
(axiom plus (zero) one)
(axiom times (?x ?y) (times ?y ?x))
(axiom times (?x (times ?y ?z)) (times (times ?x ?y) ?z))
(axiom times ((times ?x ?y) ?z) (times ?x (times ?y ?z)))
(axiom times (?x zero) zero)
(axiom times (?x one) ?x)
(axiom times (?x (plus ?y ?z)) (plus (times ?x ?y) (times ?x ?z)))
(axiom plus ((times ?x ?y) (times ?x ?z)) (times ?x (plus ?y ?z)))

(:: inc (-> (Int) Int))
(let inc (?x) (plus one ?x))

(data List (a) (Nil Cons))
(:: Nil (List a))
(:: Cons (-> (a (List a)) (List a)))

(data Pair (a b) (MakePair))
(:: MakePair (-> (a b) (Pair a b)))
(:: fst (-> ((Pair a b)) a))
(let fst ((MakePair ?x ?y)) ?x)
(:: snd (-> ((Pair a b)) b))
(let snd ((MakePair ?x ?y)) ?y)

(:: len (-> ((List a)) Int))
(let len (Nil) zero)
(let len ((Cons ?h ?t)) (inc (len ?t)))

(:: repr (-> ((List Int)) (List (Pair Int Int))))
(let repr (Nil) Nil)
(let repr ((Cons ?h ?t)) (Cons (MakePair ?h (len ?t)) (repr ?t)))

(:: spec (-> ((List (Pair Int Int))) Int))
(let spec (Nil) zero)
(let spec ((Cons (MakePair ?a ?b) ?t)) (plus (times ?a ?b) (spec ?t)))

(:: res (-> (Int (List Int)) Int))
(let res (?x Nil) zero)
(let res (?x (Cons ?h ?t)) (plus ?x (res (plus ?x ?h) ?t)))

(=== search_optimize (xs) ((List Int))
  (spec (repr xs)) (res zero xs)
)

)

