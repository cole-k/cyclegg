(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(:: if (Bool a a) a)
(let if (True ?x ?y) ?x)
(let if (False ?X ?y) ?y)

(data Int ())
(:: zero Int)
(:: inc (-> (Int) Int))
(:: eq (-> (Int Int) Bool))
(let eq (?x ?x) True)

(data List (a) (Nil Cons))
(:: Nil (List a))
(:: Cons (-> (a (List a)) (List a)))

(data Pair (a b) (MakePair))
(:: MakePair (-> (a b) (Pair a b)))
(:: fst (-> ((Pair a b)) a))
(let fst ((MakePair ?x ?y)) ?x)
(:: snd (-> ((Pair a b)) b))
(let snd ((MakePair ?x ?y)) ?y)

(:: len (-> ((List a)) Int))
(let len (Nil) zero)
(let len ((Cons ?h ?t)) (inc (len ?t)))

(:: repr (-> ((List Int)) (List (Pair Int Int))))
(let repr (Nil) Nil)
(let repr ((Cons ?h ?t)) (Cons (MakePair ?h (len ?t)) (repr ?t)))

(:: spec (-> (Int (List (Pair Int Int))) Int))
(let spec (?x Nil) zero)
(let spec (?x (Cons (MakePair ?a ?b) ?t)) (if (eq ?x ?a) ?b (spec ?x ?t)))

(:: res (-> (Int (List Int)) (Pair Int Int)))
(let res (?x Nil) (MakePair zero zero))
(let res (?x (Cons ?h ?t)) (
  MakePair
    (if (eq ?x ?h) (snd (res ?x ?t)) (fst (res ?x ?t)))
    (inc (snd (res ?x ?t)))
))

(=== search_optimize (x xs) (Int (List Int))
  (spec x (repr xs)) (fst (res x xs))
)

)

