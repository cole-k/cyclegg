(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Int ())
(:: zero Int)
(:: plus (-> (Int Int) Int))
(axiom plus (?x ?y) (plus ?y ?x))
(axiom plus (?x (plus ?y ?z)) (plus (plus ?x ?y) ?z))
(axiom plus ((plus ?x ?y) ?z) (plus ?x (plus ?y ?z)))
(axiom plus (?x zero) ?x)

(data List (Nil Cons))
(:: Nil List)
(:: Cons (-> (Int List) List))

(data CList (CNil Single Concat))
(:: CNil CList)
(:: Single (-> (Int) CList))
(:: Concat (-> (CList CList) CList))

(:: cat (-> (List List) List))
(let cat ((Cons ?h ?t) ?xs) (Cons ?h (cat ?t ?xs)))
(let cat (Nil ?xs) ?xs)

(:: repr (-> (CList) List))
(let repr (CNil) Nil)
(let repr ((Single ?h)) (Cons ?h Nil))
(let repr ((Concat ?l ?r)) (cat (repr ?l) (repr ?r)))

(:: sum (-> (List) Int))
(let sum (Nil)      zero            )
(let sum ((Cons ?h ?t)) (plus ?h (sum ?t)))

(:: res (-> (CList) Int))
(let res (CNil) zero)
(let res ((Single ?x)) ?x)
(let res ((Concat ?l ?r)) (plus (res ?l) (res ?r)))

(=== sumhom_optimize_generalized (xs ys) (List List)
  (plus (sum xs) (sum ys)) (sum (cat xs ys))
)

(=== sumhom_optimize_original (xs ys) (CList CList)
  (plus (sum (repr xs)) (sum (repr ys))) (sum (cat (repr xs) (repr ys)))
)
)
