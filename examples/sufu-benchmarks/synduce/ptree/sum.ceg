(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Int ())
(:: zero Int)
(:: plus (-> (Int Int) Int))
(axiom plus (?x ?y) (plus ?y ?x))
(axiom plus (?x (plus ?y ?z)) (plus (plus ?x ?y) ?z))
(axiom plus ((plus ?x ?y) ?z) (plus ?x (plus ?y ?z)))
(axiom plus (?x zero) ?x)

(data Tree (Leaf Node))
(:: Leaf Tree)
(:: Node (-> (Int Tree Tree) Tree))

(data List (a) (Nil Cons))
(:: Nil (List a))
(:: Cons (-> (a (List a)) (List a)))

(data PTree (PLeaf PNode))
(:: PLeaf PTree)
(:: PNode (-> (Int (List PTree)) PTree))

(:: repr (-> (PTree) Tree))
(let repr (PLeaf) Leaf)
(let repr ((PNode ?a ?xs)) (Node ?a Leaf (reprlist ?xs)))

(:: reprlist (-> ((List PTree)) Tree))
(let reprlist (Nil) Leaf)
(let reprlist ((Cons ?h ?t)) (Node zero (repr ?h) (reprlist ?t)))

(:: spec (-> (Tree) Int))
(let spec (Leaf) zero)
(let spec ((Node ?a ?l ?r)) (plus ?a (plus (spec ?l) (spec ?r))))

(:: sum (-> (PTree) Int))
(let sum (PLeaf) zero)
(let sum ((PNode ?a ?xs)) (plus ?a (sumlist ?xs)))

(:: sumlist (-> ((List PTree)) Int))
(let sumlist (Nil) zero)
(let sumlist ((Cons ?h ?t)) (plus (sum ?h) (sumlist ?t)))

(=== sumhom_optimize (t) (PTree)
  (sum t) (spec (repr t))
)

)
