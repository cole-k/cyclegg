(

(data Int ())
(:: zero Int)
(:: inf Int)
(:: plus (-> (Int Int) Int))
(let plus (?x ?y) (plus ?y ?x))
(let plus (?x (plus ?y ?z)) (plus (plus ?x ?y) ?z))
(let plus (?x zero) ?x)

(data Bool (True False))
(:: True Bool)
(:: False Bool)

(:: max (-> (Int Int) Int))
(let max (?x ?y) (max ?y ?x))
(let max ((plus ?x ?z) (plus ?y ?z)) (plus ?z (max ?x ?y)))

(data Tree (a) (Leaf Node))
(:: Leaf (Tree a))
(:: Node (-> (a (Tree a) (Tree a)) (Tree a)))

(:: spec (-> (Int (Tree Int)) Int))
(let spec (?w Leaf) ?w)
(let spec (?w (Node ?a ?l ?r)) (max (spec (plus ?w ?a) ?l) (spec (plus ?w ?a) ?r)))

(:: repr (-> ((Tree Int)) Int))
(let repr (Leaf) zero)
(let repr ((Node ?a ?l ?r)) (plus ?a (max (repr ?l) (repr ?r))))

(=== goal (t a b) ((Tree Int) Int Int)
    (plus a (spec b t)) (spec (plus a b) t)
)

)