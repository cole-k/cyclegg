(

(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Int ())
(:: zero Int)
(:: inf Int)

(data Tree (a) (Leaf Node))
(:: Leaf (-> (a) (Tree a)))
(:: Node (-> (a (Tree a) (Tree a)) (Tree a)))

(:: le (-> (Int Int) Int))
(axiom le (?x ?x) False)

(:: and (-> (Bool Bool) Bool))
(let and (False ?y) False)
(let and (?x False) False)
(let and (True True) True)


(data Pair (a b) (MakePair))
(:: MakePair (-> (a b) (Pair a b)))
(:: fst (-> ((Pair a b)) a))
(let fst ((MakePair ?x ?y)) ?x)
(:: snd (-> ((Pair a b)) b))
(let snd ((MakePair ?x ?y)) ?y)

(:: spec (-> (Int (Tree Int)) Bool))
(let spec (?y (Leaf ?a)) (le ?a ?y))
(let spec (?y (Node ?a ?l ?r)) (and (le ?a ?y) (and (spec ?a ?l) (spec ?a ?r))))

(:: repr (-> ((Tree Int)) (Pair Bool Int)))
(let repr ((Leaf ?a)) (MakePair True ?a))
(let repr ((Node ?a ?l ?r))
  (MakePair
    (and
      (and (fst (repr ?l)) (fst (repr ?r)))
      (and (le (snd (repr ?l)) ?a) (le (snd (repr ?r)) ?a))
    )
    ?a
  )
)

(=== mts_optimize (key t) (Int (Tree Int))
  (spec key t)
  (and (fst (repr t)) (le (snd (repr t)) key))
)

)