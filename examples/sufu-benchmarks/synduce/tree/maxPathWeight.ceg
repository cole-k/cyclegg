(

(data Int ())
(:: Zero Int)
(:: Inf Int)
(:: plus (-> (Int Int) Int))
(let plus (x y) (plus y x))
(let plus (x (plus y z)) (plus (plus x y) z))

(:: max (-> (Int Int) Int))
(let max (x y) (max y x))
(let max ((plus x z) (plus y z)) (plus z (max x y)))

(data Tree (a) (Leaf Node))
(:: Leaf (Tree a))
(:: Node (-> (a (Tree a) (Tree a)) (Tree a)))

(:: spec (-> (Int (Tree Int)) Int))
(let spec (w Leaf) w)
(let spec (w (Node a l r)) (max (spec (plus w a) l) (spec (plus w a) r)))

(:: repr (-> ((Tree Int)) Int))
(let repr (Leaf) Zero)
(let repr ((Node a l r)) (plus a (max (repr l) (repr r))))

(=== goal (t) ((Tree Int))
    (spec t Zero) (repr t)
)

)