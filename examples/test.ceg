(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> ((-> (List) List) List List) List))
  (let tf1 (?tv2 ?tv3 (Nil ?tv4)) ?tv3)
  (let tf1 (?tv2 ?tv3 (Cons (MakeTuple2 ?tv5 ?tv6))) (Cons (MakeTuple2 ?tv5 ($ ?tv2 ?tv6))))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv1) (tf1 tf0 ?tv1 ?tv1))
  (:: tf2 (-> ((-> (List) Nat) List) Nat))
  (let tf2 (?tv7 ?tv8) ($ ?tv7 ($ tf0 ?tv8)))
  (:: singlepass (-> ((-> (List) Nat)) (-> (List) Nat)))
  (let singlepass (?tv0) (tf2 ?tv0))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf4 (-> ((-> (List) Nat) List) Nat))
  (let tf4 (?tv10 (Nil ?tv11)) Zero)
  (let tf4 (?tv10 (Cons (MakeTuple2 ?tv12 ?tv13))) (ite (lq Zero (plus ($ ?tv10 ?tv13) ?tv12)) Zero (plus ($ ?tv10 ?tv13) ?tv12)))
  (:: tf3 (-> (List) Nat))
  (let tf3 (?tv9) (tf4 tf3 ?tv9))
  (:: tf6 (-> ((-> (List) Nat) List) Nat))
  (let tf6 (?tv16 (Nil ?tv17)) Zero)
  (let tf6 (?tv16 (Cons (MakeTuple2 ?tv18 ?tv19))) (ite (lq (plus ?tv18 ($ ?tv16 ?tv19)) Zero) (plus ?tv18 ($ ?tv16 ?tv19)) Zero))
  (:: tf5 (-> (List) Nat))
  (let tf5 (?tv15) (tf6 tf5 ?tv15))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv20) ($ tf5 ?tv20))
  (:: singlepassNew (-> ((-> (List) Nat)) (-> (List) Nat)))
  (let singlepassNew (?tv14) tf7)
  (=== optimize (inp0) (List) ($ (singlepass tf3) inp0) ($ (singlepassNew tf3) inp0))
)
