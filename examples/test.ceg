(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: tf0 (-> (List) Nat))
  (let tf0 ((Elt ?tv3)) ?tv3)
  (let tf0 ((Cons (MakeTuple2 ?tv4 ?tv5))) (min ?tv4 (spec ?tv5)))
  (:: spec (-> (List) Nat))
  (let spec (?tv2) (tf0 ?tv2))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv8 (Elt ?tv9)) (Cons (MakeTuple2 ?tv9 ?tv8)))
  (let tf1 (?tv8 (Cons (MakeTuple2 ?tv10 ?tv11))) (Cons (MakeTuple2 ?tv10 (cat ?tv11 ?tv8))))
  (:: cat (-> (List List) List))
  (let cat (?tv6 ?tv7) (tf1 ?tv7 ?tv6))
  (:: tf2 (-> (CList) List))
  (let tf2 ((Single ?tv13)) (Elt ?tv13))
  (let tf2 ((Concat (MakeTuple2 ?tv14 ?tv15))) (cat (repr ?tv14) (repr ?tv15)))
  (:: repr (-> (CList) List))
  (let repr (?tv12) (tf2 ?tv12))
  (:: main (-> (CList) Nat))
  (let main (?tv16) (spec (repr ?tv16)))
  (:: tf3 (-> (CList) Nat))
  (let tf3 ((Single ?tv18)) ?tv18)
  (let tf3 ((Concat (MakeTuple2 ?tv19 ?tv20))) (min (reprNew ?tv20) (reprNew ?tv19)))
  (:: reprNew (-> (CList) Nat))
  (let reprNew (?tv17) (tf3 ?tv17))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv21) (reprNew ?tv21))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
